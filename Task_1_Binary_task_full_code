"Install opencv before full run, as this program used opencv to process images"
#pip install opencv-python  

#!/usr/bin/env python
# -*- encoding: utf-8 -*-

"import library"
"train 4 models to make the comparison"
import numpy as np
import os
import joblib
import cv2
from PIL import Image
from sklearn import metrics
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import MinMaxScaler, normalize
from sklearn.model_selection import train_test_split

"Put all models in one set, and use abbreviation to represnt each model, so they can be quicly accessed"
ALGORITHM_SET = {'SVM': SVC(kernel='rbf',gamma=0.001),
                 'KNN': KNeighborsClassifier(),
                 'RF': RandomForestClassifier(),
                 'MLP': MLPClassifier(hidden_layer_sizes=(64, 32), max_iter=500)}
"Set path to access model, train set and test set"
MODEL_PATH = '../model/'
TRAIN_PATH = '../dataset/train/'
TEST_PATH = '../dataset/test/'
SHAPE = (32, 32)
"Set variable to quickly change the applied model"
ALGORITHM = 'SVM'

"Get image information"
def get_img_info(csv_file, train = True):

    "Get root path"
    if train:
        base_path = TRAIN_PATH
    else:
        base_path = TEST_PATH

    "Open the CSV file to get image information"
    with open(base_path+csv_file, 'r', encoding='utf-8') as f:
        image_info = []
        infos = f.readlines()
        "Remove the header"
        infos = infos[1:]
        "Change element into tuple format"
        for info in infos:
            info = info.strip('\n')
            info = info.split(',')
            image_info.append(tuple(info))
        return image_info

"Get image and label"
def get_data(img_info, train = True):

    image_list = []
    label_list = []

    "Get root path"
    if train:
        base_path = TRAIN_PATH
    else:
        base_path = TEST_PATH

    for image_name, imgae_label in img_info:

        "Use the PIL library to open the image" 
        img = Image.open(base_path+image_name)
        img = extract_feature_from_image(base_path+image_name)
        "Convert to numpy.array data type"
        img = np.array(img)

        "Process the label, no_tumor-->0, other types-->1"
        if imgae_label == 'no_tumor':
            label_list.append(0)
        else:
            label_list.append(1)
        image_list.append(img)

    "Data normalization to range (0,1)"
    min_max_scaler = MinMaxScaler(feature_range=(0, 1))
    image_list = min_max_scaler.fit_transform(image_list)
    "Normalization"
    image_list = normalize(image_list, norm='l2')

    return image_list, label_list

"Extract feature from image"
def extract_feature_from_image(image_file):
   img = cv2.imread(image_file)
   img = cv2.resize(img, SHAPE, interpolation = cv2.INTER_CUBIC)
   img = img.flatten()
   img = img / np.mean(img)
   return img
   
"Training function"
def train(X, Y, algorithm):

    "Store the validation result"
    result = {}

    "Split the train set and validation set"
    x_train, x_val, y_train, y_val = train_test_split(X, Y, train_size=0.8, random_state=True)

    "Select an algorithm"
    model = ALGORITHM_SET[algorithm]

    "Train the model"
    model.fit(x_train, y_train)

    "Validate the performance"
    y_predict = model.predict(x_val)


    save_model(model, algorithm)

    "Validation Accuracy"
    precision = metrics.accuracy_score(y_val, y_predict)
    result['Accuracy'] = precision
    "Validation Recall"
    recall = metrics.recall_score(y_val, y_predict, pos_label=1, average='binary')
    result['Recall'] = recall
    "Validation F1 Score"
    f1_score = metrics.f1_score(y_val, y_predict, pos_label=1, average='binary')
    result['F1 Score'] = f1_score

    print('Validation result of {}:{}'.format(algorithm, result))

    return result


"Testing function"
def test(X, Y, algorithm):
    "Store the validation result"
    result = {}

    "Load trained model"
    model = load_model(algorithm)

    "Test the performance"
    predict = model.predict(X)

    "Test Accuracy"
    precision = metrics.accuracy_score(Y, predict)
    result['Accuracy'] = precision
    "Test Recall"
    recall = metrics.recall_score(Y, predict, pos_label=1, average='binary')
    result['Recall'] = recall
    "Test F1 Score"
    f1_score = metrics.f1_score(Y, predict, pos_label=1, average='binary')
    result['F1 Score'] = f1_score

    print('Test result of {}:{}'.format(algorithm, result))

    return result

"Save model to given path"
def save_model(model, algorithm):
    "Whether exist a model"
    if os.path.exists(MODEL_PATH+algorithm+'.pkl'):
        os.remove(MODEL_PATH+algorithm+'.pkl')
    "Save model"
    joblib.dump(model, MODEL_PATH+algorithm+'.pkl')
    print('Finish training! The model has been saved to {}{}.pkl'.format(MODEL_PATH, algorithm))

"Load model from given path"
def load_model(algorithm):

    try:
        model = joblib.load(MODEL_PATH+algorithm+'.pkl')
        print('Load model from {}{}.pkl'.format(MODEL_PATH, algorithm))
        return model
    except:
        print('No model found! Please train a model first!')


"run the main function"
if __name__ == '__main__':

    "Training"
    img_info = get_img_info('train_label.csv')
    X_train, Y_train = get_data(img_info)
    train(X_train, Y_train, ALGORITHM)

    "Testing"
    img_info = get_img_info('test_label.csv', train=False)
    X_test, Y_test = get_data(img_info)
    test(X_test, Y_test, ALGORITHM)
